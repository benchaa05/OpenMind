#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBaseProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestComDB")]
	public partial class GesComDBClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCLIENT(CLIENT instance);
    partial void UpdateCLIENT(CLIENT instance);
    partial void DeleteCLIENT(CLIENT instance);
    partial void InsertWEB(WEB instance);
    partial void UpdateWEB(WEB instance);
    partial void DeleteWEB(WEB instance);
    partial void InsertCOMMANDE(COMMANDE instance);
    partial void UpdateCOMMANDE(COMMANDE instance);
    partial void DeleteCOMMANDE(COMMANDE instance);
    partial void InsertFACTURE(FACTURE instance);
    partial void UpdateFACTURE(FACTURE instance);
    partial void DeleteFACTURE(FACTURE instance);
    partial void InsertFOURNITURE(FOURNITURE instance);
    partial void UpdateFOURNITURE(FOURNITURE instance);
    partial void DeleteFOURNITURE(FOURNITURE instance);
    partial void InsertLINE(LINE instance);
    partial void UpdateLINE(LINE instance);
    partial void DeleteLINE(LINE instance);
    partial void InsertMESURE(MESURE instance);
    partial void UpdateMESURE(MESURE instance);
    partial void DeleteMESURE(MESURE instance);
    partial void InsertPRODUCT(PRODUCT instance);
    partial void UpdatePRODUCT(PRODUCT instance);
    partial void DeletePRODUCT(PRODUCT instance);
    partial void InsertPRODUCTCATEGORIE(PRODUCTCATEGORIE instance);
    partial void UpdatePRODUCTCATEGORIE(PRODUCTCATEGORIE instance);
    partial void DeletePRODUCTCATEGORIE(PRODUCTCATEGORIE instance);
    partial void InsertPRODUCTMEASURE(PRODUCTMEASURE instance);
    partial void UpdatePRODUCTMEASURE(PRODUCTMEASURE instance);
    partial void DeletePRODUCTMEASURE(PRODUCTMEASURE instance);
    partial void InsertPRODUCTSTATE(PRODUCTSTATE instance);
    partial void UpdatePRODUCTSTATE(PRODUCTSTATE instance);
    partial void DeletePRODUCTSTATE(PRODUCTSTATE instance);
    partial void InsertPROFORMA(PROFORMA instance);
    partial void UpdatePROFORMA(PROFORMA instance);
    partial void DeletePROFORMA(PROFORMA instance);
    partial void InsertPROVIDER(PROVIDER instance);
    partial void UpdatePROVIDER(PROVIDER instance);
    partial void DeletePROVIDER(PROVIDER instance);
    partial void InsertSTATE(STATE instance);
    partial void UpdateSTATE(STATE instance);
    partial void DeleteSTATE(STATE instance);
    partial void InsertSTOCK(STOCK instance);
    partial void UpdateSTOCK(STOCK instance);
    partial void DeleteSTOCK(STOCK instance);
    partial void InsertSTOCKER(STOCKER instance);
    partial void UpdateSTOCKER(STOCKER instance);
    partial void DeleteSTOCKER(STOCKER instance);
    partial void InsertTELEPHONE(TELEPHONE instance);
    partial void UpdateTELEPHONE(TELEPHONE instance);
    partial void DeleteTELEPHONE(TELEPHONE instance);
    #endregion
		
		public GesComDBClassesDataContext() : 
				base(global::DataBaseProject.Properties.Settings.Default.GestComDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GesComDBClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GesComDBClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GesComDBClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GesComDBClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CLIENT> CLIENTs
		{
			get
			{
				return this.GetTable<CLIENT>();
			}
		}
		
		public System.Data.Linq.Table<WEB> WEBs
		{
			get
			{
				return this.GetTable<WEB>();
			}
		}
		
		public System.Data.Linq.Table<COMMANDE> COMMANDEs
		{
			get
			{
				return this.GetTable<COMMANDE>();
			}
		}
		
		public System.Data.Linq.Table<FACTURE> FACTUREs
		{
			get
			{
				return this.GetTable<FACTURE>();
			}
		}
		
		public System.Data.Linq.Table<FOURNITURE> FOURNITUREs
		{
			get
			{
				return this.GetTable<FOURNITURE>();
			}
		}
		
		public System.Data.Linq.Table<LINE> LINEs
		{
			get
			{
				return this.GetTable<LINE>();
			}
		}
		
		public System.Data.Linq.Table<MESURE> MESUREs
		{
			get
			{
				return this.GetTable<MESURE>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCT> PRODUCTs
		{
			get
			{
				return this.GetTable<PRODUCT>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCTCATEGORIE> PRODUCTCATEGORIEs
		{
			get
			{
				return this.GetTable<PRODUCTCATEGORIE>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCTMEASURE> PRODUCTMEASUREs
		{
			get
			{
				return this.GetTable<PRODUCTMEASURE>();
			}
		}
		
		public System.Data.Linq.Table<PRODUCTSTATE> PRODUCTSTATEs
		{
			get
			{
				return this.GetTable<PRODUCTSTATE>();
			}
		}
		
		public System.Data.Linq.Table<PROFORMA> PROFORMAs
		{
			get
			{
				return this.GetTable<PROFORMA>();
			}
		}
		
		public System.Data.Linq.Table<PROVIDER> PROVIDERs
		{
			get
			{
				return this.GetTable<PROVIDER>();
			}
		}
		
		public System.Data.Linq.Table<STATE> STATEs
		{
			get
			{
				return this.GetTable<STATE>();
			}
		}
		
		public System.Data.Linq.Table<STOCK> STOCKs
		{
			get
			{
				return this.GetTable<STOCK>();
			}
		}
		
		public System.Data.Linq.Table<STOCKER> STOCKERs
		{
			get
			{
				return this.GetTable<STOCKER>();
			}
		}
		
		public System.Data.Linq.Table<TELEPHONE> TELEPHONEs
		{
			get
			{
				return this.GetTable<TELEPHONE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CLIENT")]
	public partial class CLIENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CLIENTID;
		
		private string _CLIENTFIRSTNAME;
		
		private string _CLIENTLASTNAME;
		
		private System.Nullable<System.DateTime> _CLIENTINSERTIONDATE;
		
		private string _CLIENTADRESS;
		
		private string _CLIENTRS;
		
		private string _CLIENTRC;
		
		private string _CLIENTNIS;
		
		private string _CLIENTNIF;
		
		private string _CLIENTCOMPTBANC;
		
		private string _CLIENTAI;
		
		private System.Data.Linq.Binary _CLIENTLOGO;
		
		private EntitySet<WEB> _WEBs;
		
		private EntitySet<COMMANDE> _COMMANDEs;
		
		private EntitySet<FACTURE> _FACTUREs;
		
		private EntitySet<PROFORMA> _PROFORMAs;
		
		private EntitySet<TELEPHONE> _TELEPHONEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCLIENTIDChanging(int value);
    partial void OnCLIENTIDChanged();
    partial void OnCLIENTFIRSTNAMEChanging(string value);
    partial void OnCLIENTFIRSTNAMEChanged();
    partial void OnCLIENTLASTNAMEChanging(string value);
    partial void OnCLIENTLASTNAMEChanged();
    partial void OnCLIENTINSERTIONDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnCLIENTINSERTIONDATEChanged();
    partial void OnCLIENTADRESSChanging(string value);
    partial void OnCLIENTADRESSChanged();
    partial void OnCLIENTRSChanging(string value);
    partial void OnCLIENTRSChanged();
    partial void OnCLIENTRCChanging(string value);
    partial void OnCLIENTRCChanged();
    partial void OnCLIENTNISChanging(string value);
    partial void OnCLIENTNISChanged();
    partial void OnCLIENTNIFChanging(string value);
    partial void OnCLIENTNIFChanged();
    partial void OnCLIENTCOMPTBANCChanging(string value);
    partial void OnCLIENTCOMPTBANCChanged();
    partial void OnCLIENTAIChanging(string value);
    partial void OnCLIENTAIChanged();
    partial void OnCLIENTLOGOChanging(System.Data.Linq.Binary value);
    partial void OnCLIENTLOGOChanged();
    #endregion
		
		public CLIENT()
		{
			this._WEBs = new EntitySet<WEB>(new Action<WEB>(this.attach_WEBs), new Action<WEB>(this.detach_WEBs));
			this._COMMANDEs = new EntitySet<COMMANDE>(new Action<COMMANDE>(this.attach_COMMANDEs), new Action<COMMANDE>(this.detach_COMMANDEs));
			this._FACTUREs = new EntitySet<FACTURE>(new Action<FACTURE>(this.attach_FACTUREs), new Action<FACTURE>(this.detach_FACTUREs));
			this._PROFORMAs = new EntitySet<PROFORMA>(new Action<PROFORMA>(this.attach_PROFORMAs), new Action<PROFORMA>(this.detach_PROFORMAs));
			this._TELEPHONEs = new EntitySet<TELEPHONE>(new Action<TELEPHONE>(this.attach_TELEPHONEs), new Action<TELEPHONE>(this.detach_TELEPHONEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CLIENTID
		{
			get
			{
				return this._CLIENTID;
			}
			set
			{
				if ((this._CLIENTID != value))
				{
					this.OnCLIENTIDChanging(value);
					this.SendPropertyChanging();
					this._CLIENTID = value;
					this.SendPropertyChanged("CLIENTID");
					this.OnCLIENTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTFIRSTNAME", DbType="NVarChar(MAX)")]
		public string CLIENTFIRSTNAME
		{
			get
			{
				return this._CLIENTFIRSTNAME;
			}
			set
			{
				if ((this._CLIENTFIRSTNAME != value))
				{
					this.OnCLIENTFIRSTNAMEChanging(value);
					this.SendPropertyChanging();
					this._CLIENTFIRSTNAME = value;
					this.SendPropertyChanged("CLIENTFIRSTNAME");
					this.OnCLIENTFIRSTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTLASTNAME", DbType="NVarChar(MAX)")]
		public string CLIENTLASTNAME
		{
			get
			{
				return this._CLIENTLASTNAME;
			}
			set
			{
				if ((this._CLIENTLASTNAME != value))
				{
					this.OnCLIENTLASTNAMEChanging(value);
					this.SendPropertyChanging();
					this._CLIENTLASTNAME = value;
					this.SendPropertyChanged("CLIENTLASTNAME");
					this.OnCLIENTLASTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTINSERTIONDATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> CLIENTINSERTIONDATE
		{
			get
			{
				return this._CLIENTINSERTIONDATE;
			}
			set
			{
				if ((this._CLIENTINSERTIONDATE != value))
				{
					this.OnCLIENTINSERTIONDATEChanging(value);
					this.SendPropertyChanging();
					this._CLIENTINSERTIONDATE = value;
					this.SendPropertyChanged("CLIENTINSERTIONDATE");
					this.OnCLIENTINSERTIONDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTADRESS", DbType="NVarChar(MAX)")]
		public string CLIENTADRESS
		{
			get
			{
				return this._CLIENTADRESS;
			}
			set
			{
				if ((this._CLIENTADRESS != value))
				{
					this.OnCLIENTADRESSChanging(value);
					this.SendPropertyChanging();
					this._CLIENTADRESS = value;
					this.SendPropertyChanged("CLIENTADRESS");
					this.OnCLIENTADRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTRS", DbType="NVarChar(MAX)")]
		public string CLIENTRS
		{
			get
			{
				return this._CLIENTRS;
			}
			set
			{
				if ((this._CLIENTRS != value))
				{
					this.OnCLIENTRSChanging(value);
					this.SendPropertyChanging();
					this._CLIENTRS = value;
					this.SendPropertyChanged("CLIENTRS");
					this.OnCLIENTRSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTRC", DbType="NVarChar(MAX)")]
		public string CLIENTRC
		{
			get
			{
				return this._CLIENTRC;
			}
			set
			{
				if ((this._CLIENTRC != value))
				{
					this.OnCLIENTRCChanging(value);
					this.SendPropertyChanging();
					this._CLIENTRC = value;
					this.SendPropertyChanged("CLIENTRC");
					this.OnCLIENTRCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTNIS", DbType="NVarChar(MAX)")]
		public string CLIENTNIS
		{
			get
			{
				return this._CLIENTNIS;
			}
			set
			{
				if ((this._CLIENTNIS != value))
				{
					this.OnCLIENTNISChanging(value);
					this.SendPropertyChanging();
					this._CLIENTNIS = value;
					this.SendPropertyChanged("CLIENTNIS");
					this.OnCLIENTNISChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTNIF", DbType="NVarChar(MAX)")]
		public string CLIENTNIF
		{
			get
			{
				return this._CLIENTNIF;
			}
			set
			{
				if ((this._CLIENTNIF != value))
				{
					this.OnCLIENTNIFChanging(value);
					this.SendPropertyChanging();
					this._CLIENTNIF = value;
					this.SendPropertyChanged("CLIENTNIF");
					this.OnCLIENTNIFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTCOMPTBANC", DbType="NVarChar(MAX)")]
		public string CLIENTCOMPTBANC
		{
			get
			{
				return this._CLIENTCOMPTBANC;
			}
			set
			{
				if ((this._CLIENTCOMPTBANC != value))
				{
					this.OnCLIENTCOMPTBANCChanging(value);
					this.SendPropertyChanging();
					this._CLIENTCOMPTBANC = value;
					this.SendPropertyChanged("CLIENTCOMPTBANC");
					this.OnCLIENTCOMPTBANCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTAI", DbType="NVarChar(MAX)")]
		public string CLIENTAI
		{
			get
			{
				return this._CLIENTAI;
			}
			set
			{
				if ((this._CLIENTAI != value))
				{
					this.OnCLIENTAIChanging(value);
					this.SendPropertyChanging();
					this._CLIENTAI = value;
					this.SendPropertyChanged("CLIENTAI");
					this.OnCLIENTAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTLOGO", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CLIENTLOGO
		{
			get
			{
				return this._CLIENTLOGO;
			}
			set
			{
				if ((this._CLIENTLOGO != value))
				{
					this.OnCLIENTLOGOChanging(value);
					this.SendPropertyChanging();
					this._CLIENTLOGO = value;
					this.SendPropertyChanged("CLIENTLOGO");
					this.OnCLIENTLOGOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_WEB", Storage="_WEBs", ThisKey="CLIENTID", OtherKey="CLIENTID")]
		public EntitySet<WEB> WEBs
		{
			get
			{
				return this._WEBs;
			}
			set
			{
				this._WEBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_COMMANDE", Storage="_COMMANDEs", ThisKey="CLIENTID", OtherKey="CLIENTID")]
		public EntitySet<COMMANDE> COMMANDEs
		{
			get
			{
				return this._COMMANDEs;
			}
			set
			{
				this._COMMANDEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_FACTURE", Storage="_FACTUREs", ThisKey="CLIENTID", OtherKey="CLIENTID")]
		public EntitySet<FACTURE> FACTUREs
		{
			get
			{
				return this._FACTUREs;
			}
			set
			{
				this._FACTUREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_PROFORMA", Storage="_PROFORMAs", ThisKey="CLIENTID", OtherKey="CLIENTID")]
		public EntitySet<PROFORMA> PROFORMAs
		{
			get
			{
				return this._PROFORMAs;
			}
			set
			{
				this._PROFORMAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_TELEPHONE", Storage="_TELEPHONEs", ThisKey="CLIENTID", OtherKey="CLIENTID")]
		public EntitySet<TELEPHONE> TELEPHONEs
		{
			get
			{
				return this._TELEPHONEs;
			}
			set
			{
				this._TELEPHONEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WEBs(WEB entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = this;
		}
		
		private void detach_WEBs(WEB entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = null;
		}
		
		private void attach_COMMANDEs(COMMANDE entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = this;
		}
		
		private void detach_COMMANDEs(COMMANDE entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = null;
		}
		
		private void attach_FACTUREs(FACTURE entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = this;
		}
		
		private void detach_FACTUREs(FACTURE entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = null;
		}
		
		private void attach_PROFORMAs(PROFORMA entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = this;
		}
		
		private void detach_PROFORMAs(PROFORMA entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = null;
		}
		
		private void attach_TELEPHONEs(TELEPHONE entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = this;
		}
		
		private void detach_TELEPHONEs(TELEPHONE entity)
		{
			this.SendPropertyChanging();
			entity.CLIENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WEB")]
	public partial class WEB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WEBID;
		
		private System.Nullable<int> _PROVIDERID;
		
		private System.Nullable<int> _CLIENTID;
		
		private string _WEBADRESS;
		
		private string _WEBTYPE;
		
		private EntityRef<CLIENT> _CLIENT;
		
		private EntityRef<PROVIDER> _PROVIDER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWEBIDChanging(int value);
    partial void OnWEBIDChanged();
    partial void OnPROVIDERIDChanging(System.Nullable<int> value);
    partial void OnPROVIDERIDChanged();
    partial void OnCLIENTIDChanging(System.Nullable<int> value);
    partial void OnCLIENTIDChanged();
    partial void OnWEBADRESSChanging(string value);
    partial void OnWEBADRESSChanged();
    partial void OnWEBTYPEChanging(string value);
    partial void OnWEBTYPEChanged();
    #endregion
		
		public WEB()
		{
			this._CLIENT = default(EntityRef<CLIENT>);
			this._PROVIDER = default(EntityRef<PROVIDER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WEBID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WEBID
		{
			get
			{
				return this._WEBID;
			}
			set
			{
				if ((this._WEBID != value))
				{
					this.OnWEBIDChanging(value);
					this.SendPropertyChanging();
					this._WEBID = value;
					this.SendPropertyChanged("WEBID");
					this.OnWEBIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERID", DbType="Int")]
		public System.Nullable<int> PROVIDERID
		{
			get
			{
				return this._PROVIDERID;
			}
			set
			{
				if ((this._PROVIDERID != value))
				{
					if (this._PROVIDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPROVIDERIDChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERID = value;
					this.SendPropertyChanged("PROVIDERID");
					this.OnPROVIDERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTID", DbType="Int")]
		public System.Nullable<int> CLIENTID
		{
			get
			{
				return this._CLIENTID;
			}
			set
			{
				if ((this._CLIENTID != value))
				{
					if (this._CLIENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCLIENTIDChanging(value);
					this.SendPropertyChanging();
					this._CLIENTID = value;
					this.SendPropertyChanged("CLIENTID");
					this.OnCLIENTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WEBADRESS", DbType="NVarChar(MAX)")]
		public string WEBADRESS
		{
			get
			{
				return this._WEBADRESS;
			}
			set
			{
				if ((this._WEBADRESS != value))
				{
					this.OnWEBADRESSChanging(value);
					this.SendPropertyChanging();
					this._WEBADRESS = value;
					this.SendPropertyChanged("WEBADRESS");
					this.OnWEBADRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WEBTYPE", DbType="NVarChar(MAX)")]
		public string WEBTYPE
		{
			get
			{
				return this._WEBTYPE;
			}
			set
			{
				if ((this._WEBTYPE != value))
				{
					this.OnWEBTYPEChanging(value);
					this.SendPropertyChanging();
					this._WEBTYPE = value;
					this.SendPropertyChanged("WEBTYPE");
					this.OnWEBTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_WEB", Storage="_CLIENT", ThisKey="CLIENTID", OtherKey="CLIENTID", IsForeignKey=true)]
		public CLIENT CLIENT
		{
			get
			{
				return this._CLIENT.Entity;
			}
			set
			{
				CLIENT previousValue = this._CLIENT.Entity;
				if (((previousValue != value) 
							|| (this._CLIENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLIENT.Entity = null;
						previousValue.WEBs.Remove(this);
					}
					this._CLIENT.Entity = value;
					if ((value != null))
					{
						value.WEBs.Add(this);
						this._CLIENTID = value.CLIENTID;
					}
					else
					{
						this._CLIENTID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CLIENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROVIDER_WEB", Storage="_PROVIDER", ThisKey="PROVIDERID", OtherKey="PROVIDERID", IsForeignKey=true)]
		public PROVIDER PROVIDER
		{
			get
			{
				return this._PROVIDER.Entity;
			}
			set
			{
				PROVIDER previousValue = this._PROVIDER.Entity;
				if (((previousValue != value) 
							|| (this._PROVIDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROVIDER.Entity = null;
						previousValue.WEBs.Remove(this);
					}
					this._PROVIDER.Entity = value;
					if ((value != null))
					{
						value.WEBs.Add(this);
						this._PROVIDERID = value.PROVIDERID;
					}
					else
					{
						this._PROVIDERID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PROVIDER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COMMANDE")]
	public partial class COMMANDE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _COMMANDEID;
		
		private int _CLIENTID;
		
		private System.Nullable<System.DateTime> _COMMANDEDATE;
		
		private System.Nullable<decimal> _COMMANDEMONTANT;
		
		private EntitySet<LINE> _LINEs;
		
		private EntityRef<CLIENT> _CLIENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOMMANDEIDChanging(int value);
    partial void OnCOMMANDEIDChanged();
    partial void OnCLIENTIDChanging(int value);
    partial void OnCLIENTIDChanged();
    partial void OnCOMMANDEDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnCOMMANDEDATEChanged();
    partial void OnCOMMANDEMONTANTChanging(System.Nullable<decimal> value);
    partial void OnCOMMANDEMONTANTChanged();
    #endregion
		
		public COMMANDE()
		{
			this._LINEs = new EntitySet<LINE>(new Action<LINE>(this.attach_LINEs), new Action<LINE>(this.detach_LINEs));
			this._CLIENT = default(EntityRef<CLIENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMMANDEID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int COMMANDEID
		{
			get
			{
				return this._COMMANDEID;
			}
			set
			{
				if ((this._COMMANDEID != value))
				{
					this.OnCOMMANDEIDChanging(value);
					this.SendPropertyChanging();
					this._COMMANDEID = value;
					this.SendPropertyChanged("COMMANDEID");
					this.OnCOMMANDEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTID", DbType="Int NOT NULL")]
		public int CLIENTID
		{
			get
			{
				return this._CLIENTID;
			}
			set
			{
				if ((this._CLIENTID != value))
				{
					if (this._CLIENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCLIENTIDChanging(value);
					this.SendPropertyChanging();
					this._CLIENTID = value;
					this.SendPropertyChanged("CLIENTID");
					this.OnCLIENTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMMANDEDATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> COMMANDEDATE
		{
			get
			{
				return this._COMMANDEDATE;
			}
			set
			{
				if ((this._COMMANDEDATE != value))
				{
					this.OnCOMMANDEDATEChanging(value);
					this.SendPropertyChanging();
					this._COMMANDEDATE = value;
					this.SendPropertyChanged("COMMANDEDATE");
					this.OnCOMMANDEDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMMANDEMONTANT", DbType="Money")]
		public System.Nullable<decimal> COMMANDEMONTANT
		{
			get
			{
				return this._COMMANDEMONTANT;
			}
			set
			{
				if ((this._COMMANDEMONTANT != value))
				{
					this.OnCOMMANDEMONTANTChanging(value);
					this.SendPropertyChanging();
					this._COMMANDEMONTANT = value;
					this.SendPropertyChanged("COMMANDEMONTANT");
					this.OnCOMMANDEMONTANTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMMANDE_LINE", Storage="_LINEs", ThisKey="COMMANDEID", OtherKey="COMMANDEID")]
		public EntitySet<LINE> LINEs
		{
			get
			{
				return this._LINEs;
			}
			set
			{
				this._LINEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_COMMANDE", Storage="_CLIENT", ThisKey="CLIENTID", OtherKey="CLIENTID", IsForeignKey=true)]
		public CLIENT CLIENT
		{
			get
			{
				return this._CLIENT.Entity;
			}
			set
			{
				CLIENT previousValue = this._CLIENT.Entity;
				if (((previousValue != value) 
							|| (this._CLIENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLIENT.Entity = null;
						previousValue.COMMANDEs.Remove(this);
					}
					this._CLIENT.Entity = value;
					if ((value != null))
					{
						value.COMMANDEs.Add(this);
						this._CLIENTID = value.CLIENTID;
					}
					else
					{
						this._CLIENTID = default(int);
					}
					this.SendPropertyChanged("CLIENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.COMMANDE = this;
		}
		
		private void detach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.COMMANDE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FACTURE")]
	public partial class FACTURE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FACTUREID;
		
		private int _CLIENTID;
		
		private System.Nullable<System.DateTime> _FACTUREDATE;
		
		private System.Nullable<decimal> _FACTUREMONTANT;
		
		private string _FACTUREMODEPAIEMENT;
		
		private string _FACTUREETATPAIEMENT;
		
		private System.Nullable<bool> _FACTUREVALIDITE;
		
		private EntitySet<LINE> _LINEs;
		
		private EntityRef<CLIENT> _CLIENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFACTUREIDChanging(int value);
    partial void OnFACTUREIDChanged();
    partial void OnCLIENTIDChanging(int value);
    partial void OnCLIENTIDChanged();
    partial void OnFACTUREDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnFACTUREDATEChanged();
    partial void OnFACTUREMONTANTChanging(System.Nullable<decimal> value);
    partial void OnFACTUREMONTANTChanged();
    partial void OnFACTUREMODEPAIEMENTChanging(string value);
    partial void OnFACTUREMODEPAIEMENTChanged();
    partial void OnFACTUREETATPAIEMENTChanging(string value);
    partial void OnFACTUREETATPAIEMENTChanged();
    partial void OnFACTUREVALIDITEChanging(System.Nullable<bool> value);
    partial void OnFACTUREVALIDITEChanged();
    #endregion
		
		public FACTURE()
		{
			this._LINEs = new EntitySet<LINE>(new Action<LINE>(this.attach_LINEs), new Action<LINE>(this.detach_LINEs));
			this._CLIENT = default(EntityRef<CLIENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FACTUREID
		{
			get
			{
				return this._FACTUREID;
			}
			set
			{
				if ((this._FACTUREID != value))
				{
					this.OnFACTUREIDChanging(value);
					this.SendPropertyChanging();
					this._FACTUREID = value;
					this.SendPropertyChanged("FACTUREID");
					this.OnFACTUREIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTID", DbType="Int NOT NULL")]
		public int CLIENTID
		{
			get
			{
				return this._CLIENTID;
			}
			set
			{
				if ((this._CLIENTID != value))
				{
					if (this._CLIENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCLIENTIDChanging(value);
					this.SendPropertyChanging();
					this._CLIENTID = value;
					this.SendPropertyChanged("CLIENTID");
					this.OnCLIENTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREDATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> FACTUREDATE
		{
			get
			{
				return this._FACTUREDATE;
			}
			set
			{
				if ((this._FACTUREDATE != value))
				{
					this.OnFACTUREDATEChanging(value);
					this.SendPropertyChanging();
					this._FACTUREDATE = value;
					this.SendPropertyChanged("FACTUREDATE");
					this.OnFACTUREDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREMONTANT", DbType="Money")]
		public System.Nullable<decimal> FACTUREMONTANT
		{
			get
			{
				return this._FACTUREMONTANT;
			}
			set
			{
				if ((this._FACTUREMONTANT != value))
				{
					this.OnFACTUREMONTANTChanging(value);
					this.SendPropertyChanging();
					this._FACTUREMONTANT = value;
					this.SendPropertyChanged("FACTUREMONTANT");
					this.OnFACTUREMONTANTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREMODEPAIEMENT", DbType="NVarChar(MAX)")]
		public string FACTUREMODEPAIEMENT
		{
			get
			{
				return this._FACTUREMODEPAIEMENT;
			}
			set
			{
				if ((this._FACTUREMODEPAIEMENT != value))
				{
					this.OnFACTUREMODEPAIEMENTChanging(value);
					this.SendPropertyChanging();
					this._FACTUREMODEPAIEMENT = value;
					this.SendPropertyChanged("FACTUREMODEPAIEMENT");
					this.OnFACTUREMODEPAIEMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREETATPAIEMENT", DbType="NVarChar(MAX)")]
		public string FACTUREETATPAIEMENT
		{
			get
			{
				return this._FACTUREETATPAIEMENT;
			}
			set
			{
				if ((this._FACTUREETATPAIEMENT != value))
				{
					this.OnFACTUREETATPAIEMENTChanging(value);
					this.SendPropertyChanging();
					this._FACTUREETATPAIEMENT = value;
					this.SendPropertyChanged("FACTUREETATPAIEMENT");
					this.OnFACTUREETATPAIEMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREVALIDITE", DbType="Bit")]
		public System.Nullable<bool> FACTUREVALIDITE
		{
			get
			{
				return this._FACTUREVALIDITE;
			}
			set
			{
				if ((this._FACTUREVALIDITE != value))
				{
					this.OnFACTUREVALIDITEChanging(value);
					this.SendPropertyChanging();
					this._FACTUREVALIDITE = value;
					this.SendPropertyChanged("FACTUREVALIDITE");
					this.OnFACTUREVALIDITEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FACTURE_LINE", Storage="_LINEs", ThisKey="FACTUREID", OtherKey="FACTUREID")]
		public EntitySet<LINE> LINEs
		{
			get
			{
				return this._LINEs;
			}
			set
			{
				this._LINEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_FACTURE", Storage="_CLIENT", ThisKey="CLIENTID", OtherKey="CLIENTID", IsForeignKey=true)]
		public CLIENT CLIENT
		{
			get
			{
				return this._CLIENT.Entity;
			}
			set
			{
				CLIENT previousValue = this._CLIENT.Entity;
				if (((previousValue != value) 
							|| (this._CLIENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLIENT.Entity = null;
						previousValue.FACTUREs.Remove(this);
					}
					this._CLIENT.Entity = value;
					if ((value != null))
					{
						value.FACTUREs.Add(this);
						this._CLIENTID = value.CLIENTID;
					}
					else
					{
						this._CLIENTID = default(int);
					}
					this.SendPropertyChanged("CLIENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.FACTURE = this;
		}
		
		private void detach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.FACTURE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FOURNITURE")]
	public partial class FOURNITURE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FOURNITUREID;
		
		private int _PROVIDERID;
		
		private System.Nullable<System.DateTime> _FOURNITUREDATE;
		
		private System.Nullable<decimal> _FOURNITUREMONTANT;
		
		private string _FOURNITUREMODEPAIEMENT;
		
		private string _FOURNITUREETATPAIEMENT;
		
		private System.Nullable<bool> _FOURNITUREVALIDITE;
		
		private EntitySet<LINE> _LINEs;
		
		private EntityRef<PROVIDER> _PROVIDER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFOURNITUREIDChanging(int value);
    partial void OnFOURNITUREIDChanged();
    partial void OnPROVIDERIDChanging(int value);
    partial void OnPROVIDERIDChanged();
    partial void OnFOURNITUREDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnFOURNITUREDATEChanged();
    partial void OnFOURNITUREMONTANTChanging(System.Nullable<decimal> value);
    partial void OnFOURNITUREMONTANTChanged();
    partial void OnFOURNITUREMODEPAIEMENTChanging(string value);
    partial void OnFOURNITUREMODEPAIEMENTChanged();
    partial void OnFOURNITUREETATPAIEMENTChanging(string value);
    partial void OnFOURNITUREETATPAIEMENTChanged();
    partial void OnFOURNITUREVALIDITEChanging(System.Nullable<bool> value);
    partial void OnFOURNITUREVALIDITEChanged();
    #endregion
		
		public FOURNITURE()
		{
			this._LINEs = new EntitySet<LINE>(new Action<LINE>(this.attach_LINEs), new Action<LINE>(this.detach_LINEs));
			this._PROVIDER = default(EntityRef<PROVIDER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOURNITUREID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FOURNITUREID
		{
			get
			{
				return this._FOURNITUREID;
			}
			set
			{
				if ((this._FOURNITUREID != value))
				{
					this.OnFOURNITUREIDChanging(value);
					this.SendPropertyChanging();
					this._FOURNITUREID = value;
					this.SendPropertyChanged("FOURNITUREID");
					this.OnFOURNITUREIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERID", DbType="Int NOT NULL")]
		public int PROVIDERID
		{
			get
			{
				return this._PROVIDERID;
			}
			set
			{
				if ((this._PROVIDERID != value))
				{
					if (this._PROVIDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPROVIDERIDChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERID = value;
					this.SendPropertyChanged("PROVIDERID");
					this.OnPROVIDERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOURNITUREDATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> FOURNITUREDATE
		{
			get
			{
				return this._FOURNITUREDATE;
			}
			set
			{
				if ((this._FOURNITUREDATE != value))
				{
					this.OnFOURNITUREDATEChanging(value);
					this.SendPropertyChanging();
					this._FOURNITUREDATE = value;
					this.SendPropertyChanged("FOURNITUREDATE");
					this.OnFOURNITUREDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOURNITUREMONTANT", DbType="Money")]
		public System.Nullable<decimal> FOURNITUREMONTANT
		{
			get
			{
				return this._FOURNITUREMONTANT;
			}
			set
			{
				if ((this._FOURNITUREMONTANT != value))
				{
					this.OnFOURNITUREMONTANTChanging(value);
					this.SendPropertyChanging();
					this._FOURNITUREMONTANT = value;
					this.SendPropertyChanged("FOURNITUREMONTANT");
					this.OnFOURNITUREMONTANTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOURNITUREMODEPAIEMENT", DbType="NVarChar(MAX)")]
		public string FOURNITUREMODEPAIEMENT
		{
			get
			{
				return this._FOURNITUREMODEPAIEMENT;
			}
			set
			{
				if ((this._FOURNITUREMODEPAIEMENT != value))
				{
					this.OnFOURNITUREMODEPAIEMENTChanging(value);
					this.SendPropertyChanging();
					this._FOURNITUREMODEPAIEMENT = value;
					this.SendPropertyChanged("FOURNITUREMODEPAIEMENT");
					this.OnFOURNITUREMODEPAIEMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOURNITUREETATPAIEMENT", DbType="NVarChar(MAX)")]
		public string FOURNITUREETATPAIEMENT
		{
			get
			{
				return this._FOURNITUREETATPAIEMENT;
			}
			set
			{
				if ((this._FOURNITUREETATPAIEMENT != value))
				{
					this.OnFOURNITUREETATPAIEMENTChanging(value);
					this.SendPropertyChanging();
					this._FOURNITUREETATPAIEMENT = value;
					this.SendPropertyChanged("FOURNITUREETATPAIEMENT");
					this.OnFOURNITUREETATPAIEMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOURNITUREVALIDITE", DbType="Bit")]
		public System.Nullable<bool> FOURNITUREVALIDITE
		{
			get
			{
				return this._FOURNITUREVALIDITE;
			}
			set
			{
				if ((this._FOURNITUREVALIDITE != value))
				{
					this.OnFOURNITUREVALIDITEChanging(value);
					this.SendPropertyChanging();
					this._FOURNITUREVALIDITE = value;
					this.SendPropertyChanged("FOURNITUREVALIDITE");
					this.OnFOURNITUREVALIDITEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FOURNITURE_LINE", Storage="_LINEs", ThisKey="FOURNITUREID", OtherKey="FOURNITUREID")]
		public EntitySet<LINE> LINEs
		{
			get
			{
				return this._LINEs;
			}
			set
			{
				this._LINEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROVIDER_FOURNITURE", Storage="_PROVIDER", ThisKey="PROVIDERID", OtherKey="PROVIDERID", IsForeignKey=true)]
		public PROVIDER PROVIDER
		{
			get
			{
				return this._PROVIDER.Entity;
			}
			set
			{
				PROVIDER previousValue = this._PROVIDER.Entity;
				if (((previousValue != value) 
							|| (this._PROVIDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROVIDER.Entity = null;
						previousValue.FOURNITUREs.Remove(this);
					}
					this._PROVIDER.Entity = value;
					if ((value != null))
					{
						value.FOURNITUREs.Add(this);
						this._PROVIDERID = value.PROVIDERID;
					}
					else
					{
						this._PROVIDERID = default(int);
					}
					this.SendPropertyChanged("PROVIDER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.FOURNITURE = this;
		}
		
		private void detach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.FOURNITURE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LINE")]
	public partial class LINE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LINEID;
		
		private int _FOURNITUREID;
		
		private int _PRODUCTID;
		
		private int _COMMANDEID;
		
		private int _FACTUREPROID;
		
		private int _FACTUREID;
		
		private System.Nullable<decimal> _PRIXLINEU;
		
		private System.Nullable<int> _QTELINE;
		
		private System.Nullable<double> _REMISE;
		
		private EntityRef<FOURNITURE> _FOURNITURE;
		
		private EntityRef<COMMANDE> _COMMANDE;
		
		private EntityRef<FACTURE> _FACTURE;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
		private EntityRef<PROFORMA> _PROFORMA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLINEIDChanging(int value);
    partial void OnLINEIDChanged();
    partial void OnFOURNITUREIDChanging(int value);
    partial void OnFOURNITUREIDChanged();
    partial void OnPRODUCTIDChanging(int value);
    partial void OnPRODUCTIDChanged();
    partial void OnCOMMANDEIDChanging(int value);
    partial void OnCOMMANDEIDChanged();
    partial void OnFACTUREPROIDChanging(int value);
    partial void OnFACTUREPROIDChanged();
    partial void OnFACTUREIDChanging(int value);
    partial void OnFACTUREIDChanged();
    partial void OnPRIXLINEUChanging(System.Nullable<decimal> value);
    partial void OnPRIXLINEUChanged();
    partial void OnQTELINEChanging(System.Nullable<int> value);
    partial void OnQTELINEChanged();
    partial void OnREMISEChanging(System.Nullable<double> value);
    partial void OnREMISEChanged();
    #endregion
		
		public LINE()
		{
			this._FOURNITURE = default(EntityRef<FOURNITURE>);
			this._COMMANDE = default(EntityRef<COMMANDE>);
			this._FACTURE = default(EntityRef<FACTURE>);
			this._PRODUCT = default(EntityRef<PRODUCT>);
			this._PROFORMA = default(EntityRef<PROFORMA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINEID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LINEID
		{
			get
			{
				return this._LINEID;
			}
			set
			{
				if ((this._LINEID != value))
				{
					this.OnLINEIDChanging(value);
					this.SendPropertyChanging();
					this._LINEID = value;
					this.SendPropertyChanged("LINEID");
					this.OnLINEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FOURNITUREID", DbType="Int NOT NULL")]
		public int FOURNITUREID
		{
			get
			{
				return this._FOURNITUREID;
			}
			set
			{
				if ((this._FOURNITUREID != value))
				{
					if (this._FOURNITURE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFOURNITUREIDChanging(value);
					this.SendPropertyChanging();
					this._FOURNITUREID = value;
					this.SendPropertyChanged("FOURNITUREID");
					this.OnFOURNITUREIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTID", DbType="Int NOT NULL")]
		public int PRODUCTID
		{
			get
			{
				return this._PRODUCTID;
			}
			set
			{
				if ((this._PRODUCTID != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCTIDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTID = value;
					this.SendPropertyChanged("PRODUCTID");
					this.OnPRODUCTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMMANDEID", DbType="Int NOT NULL")]
		public int COMMANDEID
		{
			get
			{
				return this._COMMANDEID;
			}
			set
			{
				if ((this._COMMANDEID != value))
				{
					if (this._COMMANDE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOMMANDEIDChanging(value);
					this.SendPropertyChanging();
					this._COMMANDEID = value;
					this.SendPropertyChanged("COMMANDEID");
					this.OnCOMMANDEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREPROID", DbType="Int NOT NULL")]
		public int FACTUREPROID
		{
			get
			{
				return this._FACTUREPROID;
			}
			set
			{
				if ((this._FACTUREPROID != value))
				{
					if (this._PROFORMA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFACTUREPROIDChanging(value);
					this.SendPropertyChanging();
					this._FACTUREPROID = value;
					this.SendPropertyChanged("FACTUREPROID");
					this.OnFACTUREPROIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREID", DbType="Int NOT NULL")]
		public int FACTUREID
		{
			get
			{
				return this._FACTUREID;
			}
			set
			{
				if ((this._FACTUREID != value))
				{
					if (this._FACTURE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFACTUREIDChanging(value);
					this.SendPropertyChanging();
					this._FACTUREID = value;
					this.SendPropertyChanged("FACTUREID");
					this.OnFACTUREIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRIXLINEU", DbType="Money")]
		public System.Nullable<decimal> PRIXLINEU
		{
			get
			{
				return this._PRIXLINEU;
			}
			set
			{
				if ((this._PRIXLINEU != value))
				{
					this.OnPRIXLINEUChanging(value);
					this.SendPropertyChanging();
					this._PRIXLINEU = value;
					this.SendPropertyChanged("PRIXLINEU");
					this.OnPRIXLINEUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QTELINE", DbType="Int")]
		public System.Nullable<int> QTELINE
		{
			get
			{
				return this._QTELINE;
			}
			set
			{
				if ((this._QTELINE != value))
				{
					this.OnQTELINEChanging(value);
					this.SendPropertyChanging();
					this._QTELINE = value;
					this.SendPropertyChanged("QTELINE");
					this.OnQTELINEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REMISE", DbType="Float")]
		public System.Nullable<double> REMISE
		{
			get
			{
				return this._REMISE;
			}
			set
			{
				if ((this._REMISE != value))
				{
					this.OnREMISEChanging(value);
					this.SendPropertyChanging();
					this._REMISE = value;
					this.SendPropertyChanged("REMISE");
					this.OnREMISEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FOURNITURE_LINE", Storage="_FOURNITURE", ThisKey="FOURNITUREID", OtherKey="FOURNITUREID", IsForeignKey=true)]
		public FOURNITURE FOURNITURE
		{
			get
			{
				return this._FOURNITURE.Entity;
			}
			set
			{
				FOURNITURE previousValue = this._FOURNITURE.Entity;
				if (((previousValue != value) 
							|| (this._FOURNITURE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FOURNITURE.Entity = null;
						previousValue.LINEs.Remove(this);
					}
					this._FOURNITURE.Entity = value;
					if ((value != null))
					{
						value.LINEs.Add(this);
						this._FOURNITUREID = value.FOURNITUREID;
					}
					else
					{
						this._FOURNITUREID = default(int);
					}
					this.SendPropertyChanged("FOURNITURE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMMANDE_LINE", Storage="_COMMANDE", ThisKey="COMMANDEID", OtherKey="COMMANDEID", IsForeignKey=true)]
		public COMMANDE COMMANDE
		{
			get
			{
				return this._COMMANDE.Entity;
			}
			set
			{
				COMMANDE previousValue = this._COMMANDE.Entity;
				if (((previousValue != value) 
							|| (this._COMMANDE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COMMANDE.Entity = null;
						previousValue.LINEs.Remove(this);
					}
					this._COMMANDE.Entity = value;
					if ((value != null))
					{
						value.LINEs.Add(this);
						this._COMMANDEID = value.COMMANDEID;
					}
					else
					{
						this._COMMANDEID = default(int);
					}
					this.SendPropertyChanged("COMMANDE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FACTURE_LINE", Storage="_FACTURE", ThisKey="FACTUREID", OtherKey="FACTUREID", IsForeignKey=true)]
		public FACTURE FACTURE
		{
			get
			{
				return this._FACTURE.Entity;
			}
			set
			{
				FACTURE previousValue = this._FACTURE.Entity;
				if (((previousValue != value) 
							|| (this._FACTURE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FACTURE.Entity = null;
						previousValue.LINEs.Remove(this);
					}
					this._FACTURE.Entity = value;
					if ((value != null))
					{
						value.LINEs.Add(this);
						this._FACTUREID = value.FACTUREID;
					}
					else
					{
						this._FACTUREID = default(int);
					}
					this.SendPropertyChanged("FACTURE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_LINE", Storage="_PRODUCT", ThisKey="PRODUCTID", OtherKey="PRODUCTID", IsForeignKey=true)]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.LINEs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.LINEs.Add(this);
						this._PRODUCTID = value.PRODUCTID;
					}
					else
					{
						this._PRODUCTID = default(int);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROFORMA_LINE", Storage="_PROFORMA", ThisKey="FACTUREPROID", OtherKey="FACTUREPROID", IsForeignKey=true)]
		public PROFORMA PROFORMA
		{
			get
			{
				return this._PROFORMA.Entity;
			}
			set
			{
				PROFORMA previousValue = this._PROFORMA.Entity;
				if (((previousValue != value) 
							|| (this._PROFORMA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROFORMA.Entity = null;
						previousValue.LINEs.Remove(this);
					}
					this._PROFORMA.Entity = value;
					if ((value != null))
					{
						value.LINEs.Add(this);
						this._FACTUREPROID = value.FACTUREPROID;
					}
					else
					{
						this._FACTUREPROID = default(int);
					}
					this.SendPropertyChanged("PROFORMA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MESURE")]
	public partial class MESURE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PRODUCTID;
		
		private int _PROMEASUREID;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
		private EntityRef<PRODUCTMEASURE> _PRODUCTMEASURE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPRODUCTIDChanging(int value);
    partial void OnPRODUCTIDChanged();
    partial void OnPROMEASUREIDChanging(int value);
    partial void OnPROMEASUREIDChanged();
    #endregion
		
		public MESURE()
		{
			this._PRODUCT = default(EntityRef<PRODUCT>);
			this._PRODUCTMEASURE = default(EntityRef<PRODUCTMEASURE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PRODUCTID
		{
			get
			{
				return this._PRODUCTID;
			}
			set
			{
				if ((this._PRODUCTID != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCTIDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTID = value;
					this.SendPropertyChanged("PRODUCTID");
					this.OnPRODUCTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROMEASUREID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PROMEASUREID
		{
			get
			{
				return this._PROMEASUREID;
			}
			set
			{
				if ((this._PROMEASUREID != value))
				{
					if (this._PRODUCTMEASURE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPROMEASUREIDChanging(value);
					this.SendPropertyChanging();
					this._PROMEASUREID = value;
					this.SendPropertyChanged("PROMEASUREID");
					this.OnPROMEASUREIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_MESURE", Storage="_PRODUCT", ThisKey="PRODUCTID", OtherKey="PRODUCTID", IsForeignKey=true)]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.MESUREs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.MESUREs.Add(this);
						this._PRODUCTID = value.PRODUCTID;
					}
					else
					{
						this._PRODUCTID = default(int);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTMEASURE_MESURE", Storage="_PRODUCTMEASURE", ThisKey="PROMEASUREID", OtherKey="PROMEASUREID", IsForeignKey=true)]
		public PRODUCTMEASURE PRODUCTMEASURE
		{
			get
			{
				return this._PRODUCTMEASURE.Entity;
			}
			set
			{
				PRODUCTMEASURE previousValue = this._PRODUCTMEASURE.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCTMEASURE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCTMEASURE.Entity = null;
						previousValue.MESUREs.Remove(this);
					}
					this._PRODUCTMEASURE.Entity = value;
					if ((value != null))
					{
						value.MESUREs.Add(this);
						this._PROMEASUREID = value.PROMEASUREID;
					}
					else
					{
						this._PROMEASUREID = default(int);
					}
					this.SendPropertyChanged("PRODUCTMEASURE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCT")]
	public partial class PRODUCT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PRODUCTID;
		
		private int _PRODUCTCATEGORIEID;
		
		private string _PRODUCTNAME;
		
		private string _PRODUCTREFERENCEEXTERNE;
		
		private string _PRODUCTREFERENCEINTERNE;
		
		private System.Nullable<int> _PRODUCTMINQTE;
		
		private System.Nullable<int> _PRODUCTMAXQTE;
		
		private System.Nullable<System.DateTime> _PRODUCTINSERTIONDATE;
		
		private string _PRODUCTREMARKS;
		
		private System.Nullable<double> _TAUXTVA;
		
		private System.Nullable<decimal> _PRIXVENTE;
		
		private EntitySet<LINE> _LINEs;
		
		private EntitySet<MESURE> _MESUREs;
		
		private EntitySet<STATE> _STATEs;
		
		private EntitySet<STOCKER> _STOCKERs;
		
		private EntityRef<PRODUCTCATEGORIE> _PRODUCTCATEGORIE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPRODUCTIDChanging(int value);
    partial void OnPRODUCTIDChanged();
    partial void OnPRODUCTCATEGORIEIDChanging(int value);
    partial void OnPRODUCTCATEGORIEIDChanged();
    partial void OnPRODUCTNAMEChanging(string value);
    partial void OnPRODUCTNAMEChanged();
    partial void OnPRODUCTREFERENCEEXTERNEChanging(string value);
    partial void OnPRODUCTREFERENCEEXTERNEChanged();
    partial void OnPRODUCTREFERENCEINTERNEChanging(string value);
    partial void OnPRODUCTREFERENCEINTERNEChanged();
    partial void OnPRODUCTMINQTEChanging(System.Nullable<int> value);
    partial void OnPRODUCTMINQTEChanged();
    partial void OnPRODUCTMAXQTEChanging(System.Nullable<int> value);
    partial void OnPRODUCTMAXQTEChanged();
    partial void OnPRODUCTINSERTIONDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnPRODUCTINSERTIONDATEChanged();
    partial void OnPRODUCTREMARKSChanging(string value);
    partial void OnPRODUCTREMARKSChanged();
    partial void OnTAUXTVAChanging(System.Nullable<double> value);
    partial void OnTAUXTVAChanged();
    partial void OnPRIXVENTEChanging(System.Nullable<decimal> value);
    partial void OnPRIXVENTEChanged();
    #endregion
		
		public PRODUCT()
		{
			this._LINEs = new EntitySet<LINE>(new Action<LINE>(this.attach_LINEs), new Action<LINE>(this.detach_LINEs));
			this._MESUREs = new EntitySet<MESURE>(new Action<MESURE>(this.attach_MESUREs), new Action<MESURE>(this.detach_MESUREs));
			this._STATEs = new EntitySet<STATE>(new Action<STATE>(this.attach_STATEs), new Action<STATE>(this.detach_STATEs));
			this._STOCKERs = new EntitySet<STOCKER>(new Action<STOCKER>(this.attach_STOCKERs), new Action<STOCKER>(this.detach_STOCKERs));
			this._PRODUCTCATEGORIE = default(EntityRef<PRODUCTCATEGORIE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PRODUCTID
		{
			get
			{
				return this._PRODUCTID;
			}
			set
			{
				if ((this._PRODUCTID != value))
				{
					this.OnPRODUCTIDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTID = value;
					this.SendPropertyChanged("PRODUCTID");
					this.OnPRODUCTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTCATEGORIEID", DbType="Int NOT NULL")]
		public int PRODUCTCATEGORIEID
		{
			get
			{
				return this._PRODUCTCATEGORIEID;
			}
			set
			{
				if ((this._PRODUCTCATEGORIEID != value))
				{
					if (this._PRODUCTCATEGORIE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCTCATEGORIEIDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTCATEGORIEID = value;
					this.SendPropertyChanged("PRODUCTCATEGORIEID");
					this.OnPRODUCTCATEGORIEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTNAME", DbType="NVarChar(MAX)")]
		public string PRODUCTNAME
		{
			get
			{
				return this._PRODUCTNAME;
			}
			set
			{
				if ((this._PRODUCTNAME != value))
				{
					this.OnPRODUCTNAMEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTNAME = value;
					this.SendPropertyChanged("PRODUCTNAME");
					this.OnPRODUCTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTREFERENCEEXTERNE", DbType="NVarChar(MAX)")]
		public string PRODUCTREFERENCEEXTERNE
		{
			get
			{
				return this._PRODUCTREFERENCEEXTERNE;
			}
			set
			{
				if ((this._PRODUCTREFERENCEEXTERNE != value))
				{
					this.OnPRODUCTREFERENCEEXTERNEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTREFERENCEEXTERNE = value;
					this.SendPropertyChanged("PRODUCTREFERENCEEXTERNE");
					this.OnPRODUCTREFERENCEEXTERNEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTREFERENCEINTERNE", DbType="NVarChar(MAX)")]
		public string PRODUCTREFERENCEINTERNE
		{
			get
			{
				return this._PRODUCTREFERENCEINTERNE;
			}
			set
			{
				if ((this._PRODUCTREFERENCEINTERNE != value))
				{
					this.OnPRODUCTREFERENCEINTERNEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTREFERENCEINTERNE = value;
					this.SendPropertyChanged("PRODUCTREFERENCEINTERNE");
					this.OnPRODUCTREFERENCEINTERNEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTMINQTE", DbType="Int")]
		public System.Nullable<int> PRODUCTMINQTE
		{
			get
			{
				return this._PRODUCTMINQTE;
			}
			set
			{
				if ((this._PRODUCTMINQTE != value))
				{
					this.OnPRODUCTMINQTEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTMINQTE = value;
					this.SendPropertyChanged("PRODUCTMINQTE");
					this.OnPRODUCTMINQTEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTMAXQTE", DbType="Int")]
		public System.Nullable<int> PRODUCTMAXQTE
		{
			get
			{
				return this._PRODUCTMAXQTE;
			}
			set
			{
				if ((this._PRODUCTMAXQTE != value))
				{
					this.OnPRODUCTMAXQTEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTMAXQTE = value;
					this.SendPropertyChanged("PRODUCTMAXQTE");
					this.OnPRODUCTMAXQTEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTINSERTIONDATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> PRODUCTINSERTIONDATE
		{
			get
			{
				return this._PRODUCTINSERTIONDATE;
			}
			set
			{
				if ((this._PRODUCTINSERTIONDATE != value))
				{
					this.OnPRODUCTINSERTIONDATEChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTINSERTIONDATE = value;
					this.SendPropertyChanged("PRODUCTINSERTIONDATE");
					this.OnPRODUCTINSERTIONDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTREMARKS", DbType="NVarChar(MAX)")]
		public string PRODUCTREMARKS
		{
			get
			{
				return this._PRODUCTREMARKS;
			}
			set
			{
				if ((this._PRODUCTREMARKS != value))
				{
					this.OnPRODUCTREMARKSChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTREMARKS = value;
					this.SendPropertyChanged("PRODUCTREMARKS");
					this.OnPRODUCTREMARKSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAUXTVA", DbType="Float")]
		public System.Nullable<double> TAUXTVA
		{
			get
			{
				return this._TAUXTVA;
			}
			set
			{
				if ((this._TAUXTVA != value))
				{
					this.OnTAUXTVAChanging(value);
					this.SendPropertyChanging();
					this._TAUXTVA = value;
					this.SendPropertyChanged("TAUXTVA");
					this.OnTAUXTVAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRIXVENTE", DbType="Money")]
		public System.Nullable<decimal> PRIXVENTE
		{
			get
			{
				return this._PRIXVENTE;
			}
			set
			{
				if ((this._PRIXVENTE != value))
				{
					this.OnPRIXVENTEChanging(value);
					this.SendPropertyChanging();
					this._PRIXVENTE = value;
					this.SendPropertyChanged("PRIXVENTE");
					this.OnPRIXVENTEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_LINE", Storage="_LINEs", ThisKey="PRODUCTID", OtherKey="PRODUCTID")]
		public EntitySet<LINE> LINEs
		{
			get
			{
				return this._LINEs;
			}
			set
			{
				this._LINEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_MESURE", Storage="_MESUREs", ThisKey="PRODUCTID", OtherKey="PRODUCTID")]
		public EntitySet<MESURE> MESUREs
		{
			get
			{
				return this._MESUREs;
			}
			set
			{
				this._MESUREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_STATE", Storage="_STATEs", ThisKey="PRODUCTID", OtherKey="PRODUCTID")]
		public EntitySet<STATE> STATEs
		{
			get
			{
				return this._STATEs;
			}
			set
			{
				this._STATEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_STOCKER", Storage="_STOCKERs", ThisKey="PRODUCTID", OtherKey="PRODUCTID")]
		public EntitySet<STOCKER> STOCKERs
		{
			get
			{
				return this._STOCKERs;
			}
			set
			{
				this._STOCKERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTCATEGORIE_PRODUCT", Storage="_PRODUCTCATEGORIE", ThisKey="PRODUCTCATEGORIEID", OtherKey="PRODUCTCATEGORIEID", IsForeignKey=true)]
		public PRODUCTCATEGORIE PRODUCTCATEGORIE
		{
			get
			{
				return this._PRODUCTCATEGORIE.Entity;
			}
			set
			{
				PRODUCTCATEGORIE previousValue = this._PRODUCTCATEGORIE.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCTCATEGORIE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCTCATEGORIE.Entity = null;
						previousValue.PRODUCTs.Remove(this);
					}
					this._PRODUCTCATEGORIE.Entity = value;
					if ((value != null))
					{
						value.PRODUCTs.Add(this);
						this._PRODUCTCATEGORIEID = value.PRODUCTCATEGORIEID;
					}
					else
					{
						this._PRODUCTCATEGORIEID = default(int);
					}
					this.SendPropertyChanged("PRODUCTCATEGORIE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
		
		private void attach_MESUREs(MESURE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_MESUREs(MESURE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
		
		private void attach_STATEs(STATE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_STATEs(STATE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
		
		private void attach_STOCKERs(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = this;
		}
		
		private void detach_STOCKERs(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCTCATEGORIE")]
	public partial class PRODUCTCATEGORIE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PRODUCTCATEGORIEID;
		
		private System.Nullable<int> _PRO_PRODUCTCATEGORIEID;
		
		private string _CATEGORIENAME;
		
		private EntitySet<PRODUCT> _PRODUCTs;
		
		private EntitySet<PRODUCTCATEGORIE> _PRODUCTCATEGORIEs;
		
		private EntityRef<PRODUCTCATEGORIE> _PRODUCTCATEGORIE1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPRODUCTCATEGORIEIDChanging(int value);
    partial void OnPRODUCTCATEGORIEIDChanged();
    partial void OnPRO_PRODUCTCATEGORIEIDChanging(System.Nullable<int> value);
    partial void OnPRO_PRODUCTCATEGORIEIDChanged();
    partial void OnCATEGORIENAMEChanging(string value);
    partial void OnCATEGORIENAMEChanged();
    #endregion
		
		public PRODUCTCATEGORIE()
		{
			this._PRODUCTs = new EntitySet<PRODUCT>(new Action<PRODUCT>(this.attach_PRODUCTs), new Action<PRODUCT>(this.detach_PRODUCTs));
			this._PRODUCTCATEGORIEs = new EntitySet<PRODUCTCATEGORIE>(new Action<PRODUCTCATEGORIE>(this.attach_PRODUCTCATEGORIEs), new Action<PRODUCTCATEGORIE>(this.detach_PRODUCTCATEGORIEs));
			this._PRODUCTCATEGORIE1 = default(EntityRef<PRODUCTCATEGORIE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTCATEGORIEID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PRODUCTCATEGORIEID
		{
			get
			{
				return this._PRODUCTCATEGORIEID;
			}
			set
			{
				if ((this._PRODUCTCATEGORIEID != value))
				{
					this.OnPRODUCTCATEGORIEIDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTCATEGORIEID = value;
					this.SendPropertyChanged("PRODUCTCATEGORIEID");
					this.OnPRODUCTCATEGORIEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRO_PRODUCTCATEGORIEID", DbType="Int")]
		public System.Nullable<int> PRO_PRODUCTCATEGORIEID
		{
			get
			{
				return this._PRO_PRODUCTCATEGORIEID;
			}
			set
			{
				if ((this._PRO_PRODUCTCATEGORIEID != value))
				{
					if (this._PRODUCTCATEGORIE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRO_PRODUCTCATEGORIEIDChanging(value);
					this.SendPropertyChanging();
					this._PRO_PRODUCTCATEGORIEID = value;
					this.SendPropertyChanged("PRO_PRODUCTCATEGORIEID");
					this.OnPRO_PRODUCTCATEGORIEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORIENAME", DbType="NVarChar(MAX)")]
		public string CATEGORIENAME
		{
			get
			{
				return this._CATEGORIENAME;
			}
			set
			{
				if ((this._CATEGORIENAME != value))
				{
					this.OnCATEGORIENAMEChanging(value);
					this.SendPropertyChanging();
					this._CATEGORIENAME = value;
					this.SendPropertyChanged("CATEGORIENAME");
					this.OnCATEGORIENAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTCATEGORIE_PRODUCT", Storage="_PRODUCTs", ThisKey="PRODUCTCATEGORIEID", OtherKey="PRODUCTCATEGORIEID")]
		public EntitySet<PRODUCT> PRODUCTs
		{
			get
			{
				return this._PRODUCTs;
			}
			set
			{
				this._PRODUCTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTCATEGORIE_PRODUCTCATEGORIE", Storage="_PRODUCTCATEGORIEs", ThisKey="PRODUCTCATEGORIEID", OtherKey="PRO_PRODUCTCATEGORIEID")]
		public EntitySet<PRODUCTCATEGORIE> PRODUCTCATEGORIEs
		{
			get
			{
				return this._PRODUCTCATEGORIEs;
			}
			set
			{
				this._PRODUCTCATEGORIEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTCATEGORIE_PRODUCTCATEGORIE", Storage="_PRODUCTCATEGORIE1", ThisKey="PRO_PRODUCTCATEGORIEID", OtherKey="PRODUCTCATEGORIEID", IsForeignKey=true)]
		public PRODUCTCATEGORIE PRODUCTCATEGORIE1
		{
			get
			{
				return this._PRODUCTCATEGORIE1.Entity;
			}
			set
			{
				PRODUCTCATEGORIE previousValue = this._PRODUCTCATEGORIE1.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCTCATEGORIE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCTCATEGORIE1.Entity = null;
						previousValue.PRODUCTCATEGORIEs.Remove(this);
					}
					this._PRODUCTCATEGORIE1.Entity = value;
					if ((value != null))
					{
						value.PRODUCTCATEGORIEs.Add(this);
						this._PRO_PRODUCTCATEGORIEID = value.PRODUCTCATEGORIEID;
					}
					else
					{
						this._PRO_PRODUCTCATEGORIEID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PRODUCTCATEGORIE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTCATEGORIE = this;
		}
		
		private void detach_PRODUCTs(PRODUCT entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTCATEGORIE = null;
		}
		
		private void attach_PRODUCTCATEGORIEs(PRODUCTCATEGORIE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTCATEGORIE1 = this;
		}
		
		private void detach_PRODUCTCATEGORIEs(PRODUCTCATEGORIE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTCATEGORIE1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCTMEASURE")]
	public partial class PRODUCTMEASURE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PROMEASUREID;
		
		private string _PROMEASURETYPE;
		
		private System.Nullable<double> _PROMEASUREVALUE;
		
		private string _PROMEASUREUNIT;
		
		private EntitySet<MESURE> _MESUREs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPROMEASUREIDChanging(int value);
    partial void OnPROMEASUREIDChanged();
    partial void OnPROMEASURETYPEChanging(string value);
    partial void OnPROMEASURETYPEChanged();
    partial void OnPROMEASUREVALUEChanging(System.Nullable<double> value);
    partial void OnPROMEASUREVALUEChanged();
    partial void OnPROMEASUREUNITChanging(string value);
    partial void OnPROMEASUREUNITChanged();
    #endregion
		
		public PRODUCTMEASURE()
		{
			this._MESUREs = new EntitySet<MESURE>(new Action<MESURE>(this.attach_MESUREs), new Action<MESURE>(this.detach_MESUREs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROMEASUREID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PROMEASUREID
		{
			get
			{
				return this._PROMEASUREID;
			}
			set
			{
				if ((this._PROMEASUREID != value))
				{
					this.OnPROMEASUREIDChanging(value);
					this.SendPropertyChanging();
					this._PROMEASUREID = value;
					this.SendPropertyChanged("PROMEASUREID");
					this.OnPROMEASUREIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROMEASURETYPE", DbType="NVarChar(MAX)")]
		public string PROMEASURETYPE
		{
			get
			{
				return this._PROMEASURETYPE;
			}
			set
			{
				if ((this._PROMEASURETYPE != value))
				{
					this.OnPROMEASURETYPEChanging(value);
					this.SendPropertyChanging();
					this._PROMEASURETYPE = value;
					this.SendPropertyChanged("PROMEASURETYPE");
					this.OnPROMEASURETYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROMEASUREVALUE", DbType="Float")]
		public System.Nullable<double> PROMEASUREVALUE
		{
			get
			{
				return this._PROMEASUREVALUE;
			}
			set
			{
				if ((this._PROMEASUREVALUE != value))
				{
					this.OnPROMEASUREVALUEChanging(value);
					this.SendPropertyChanging();
					this._PROMEASUREVALUE = value;
					this.SendPropertyChanged("PROMEASUREVALUE");
					this.OnPROMEASUREVALUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROMEASUREUNIT", DbType="NVarChar(MAX)")]
		public string PROMEASUREUNIT
		{
			get
			{
				return this._PROMEASUREUNIT;
			}
			set
			{
				if ((this._PROMEASUREUNIT != value))
				{
					this.OnPROMEASUREUNITChanging(value);
					this.SendPropertyChanging();
					this._PROMEASUREUNIT = value;
					this.SendPropertyChanged("PROMEASUREUNIT");
					this.OnPROMEASUREUNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTMEASURE_MESURE", Storage="_MESUREs", ThisKey="PROMEASUREID", OtherKey="PROMEASUREID")]
		public EntitySet<MESURE> MESUREs
		{
			get
			{
				return this._MESUREs;
			}
			set
			{
				this._MESUREs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MESUREs(MESURE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTMEASURE = this;
		}
		
		private void detach_MESUREs(MESURE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTMEASURE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRODUCTSTATE")]
	public partial class PRODUCTSTATE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PROSTATEID;
		
		private string _PROSTATENAME;
		
		private EntitySet<STATE> _STATEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPROSTATEIDChanging(int value);
    partial void OnPROSTATEIDChanged();
    partial void OnPROSTATENAMEChanging(string value);
    partial void OnPROSTATENAMEChanged();
    #endregion
		
		public PRODUCTSTATE()
		{
			this._STATEs = new EntitySet<STATE>(new Action<STATE>(this.attach_STATEs), new Action<STATE>(this.detach_STATEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROSTATEID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PROSTATEID
		{
			get
			{
				return this._PROSTATEID;
			}
			set
			{
				if ((this._PROSTATEID != value))
				{
					this.OnPROSTATEIDChanging(value);
					this.SendPropertyChanging();
					this._PROSTATEID = value;
					this.SendPropertyChanged("PROSTATEID");
					this.OnPROSTATEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROSTATENAME", DbType="NVarChar(MAX)")]
		public string PROSTATENAME
		{
			get
			{
				return this._PROSTATENAME;
			}
			set
			{
				if ((this._PROSTATENAME != value))
				{
					this.OnPROSTATENAMEChanging(value);
					this.SendPropertyChanging();
					this._PROSTATENAME = value;
					this.SendPropertyChanged("PROSTATENAME");
					this.OnPROSTATENAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTSTATE_STATE", Storage="_STATEs", ThisKey="PROSTATEID", OtherKey="PROSTATEID")]
		public EntitySet<STATE> STATEs
		{
			get
			{
				return this._STATEs;
			}
			set
			{
				this._STATEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STATEs(STATE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTSTATE = this;
		}
		
		private void detach_STATEs(STATE entity)
		{
			this.SendPropertyChanging();
			entity.PRODUCTSTATE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROFORMA")]
	public partial class PROFORMA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FACTUREPROID;
		
		private int _CLIENTID;
		
		private System.Nullable<System.DateTime> _FACTUREPRODATA;
		
		private System.Nullable<decimal> _FACTUREPROMONTANT;
		
		private EntitySet<LINE> _LINEs;
		
		private EntityRef<CLIENT> _CLIENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFACTUREPROIDChanging(int value);
    partial void OnFACTUREPROIDChanged();
    partial void OnCLIENTIDChanging(int value);
    partial void OnCLIENTIDChanged();
    partial void OnFACTUREPRODATAChanging(System.Nullable<System.DateTime> value);
    partial void OnFACTUREPRODATAChanged();
    partial void OnFACTUREPROMONTANTChanging(System.Nullable<decimal> value);
    partial void OnFACTUREPROMONTANTChanged();
    #endregion
		
		public PROFORMA()
		{
			this._LINEs = new EntitySet<LINE>(new Action<LINE>(this.attach_LINEs), new Action<LINE>(this.detach_LINEs));
			this._CLIENT = default(EntityRef<CLIENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREPROID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FACTUREPROID
		{
			get
			{
				return this._FACTUREPROID;
			}
			set
			{
				if ((this._FACTUREPROID != value))
				{
					this.OnFACTUREPROIDChanging(value);
					this.SendPropertyChanging();
					this._FACTUREPROID = value;
					this.SendPropertyChanged("FACTUREPROID");
					this.OnFACTUREPROIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTID", DbType="Int NOT NULL")]
		public int CLIENTID
		{
			get
			{
				return this._CLIENTID;
			}
			set
			{
				if ((this._CLIENTID != value))
				{
					if (this._CLIENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCLIENTIDChanging(value);
					this.SendPropertyChanging();
					this._CLIENTID = value;
					this.SendPropertyChanged("CLIENTID");
					this.OnCLIENTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREPRODATA", DbType="DateTime")]
		public System.Nullable<System.DateTime> FACTUREPRODATA
		{
			get
			{
				return this._FACTUREPRODATA;
			}
			set
			{
				if ((this._FACTUREPRODATA != value))
				{
					this.OnFACTUREPRODATAChanging(value);
					this.SendPropertyChanging();
					this._FACTUREPRODATA = value;
					this.SendPropertyChanged("FACTUREPRODATA");
					this.OnFACTUREPRODATAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FACTUREPROMONTANT", DbType="Money")]
		public System.Nullable<decimal> FACTUREPROMONTANT
		{
			get
			{
				return this._FACTUREPROMONTANT;
			}
			set
			{
				if ((this._FACTUREPROMONTANT != value))
				{
					this.OnFACTUREPROMONTANTChanging(value);
					this.SendPropertyChanging();
					this._FACTUREPROMONTANT = value;
					this.SendPropertyChanged("FACTUREPROMONTANT");
					this.OnFACTUREPROMONTANTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROFORMA_LINE", Storage="_LINEs", ThisKey="FACTUREPROID", OtherKey="FACTUREPROID")]
		public EntitySet<LINE> LINEs
		{
			get
			{
				return this._LINEs;
			}
			set
			{
				this._LINEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_PROFORMA", Storage="_CLIENT", ThisKey="CLIENTID", OtherKey="CLIENTID", IsForeignKey=true)]
		public CLIENT CLIENT
		{
			get
			{
				return this._CLIENT.Entity;
			}
			set
			{
				CLIENT previousValue = this._CLIENT.Entity;
				if (((previousValue != value) 
							|| (this._CLIENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLIENT.Entity = null;
						previousValue.PROFORMAs.Remove(this);
					}
					this._CLIENT.Entity = value;
					if ((value != null))
					{
						value.PROFORMAs.Add(this);
						this._CLIENTID = value.CLIENTID;
					}
					else
					{
						this._CLIENTID = default(int);
					}
					this.SendPropertyChanged("CLIENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.PROFORMA = this;
		}
		
		private void detach_LINEs(LINE entity)
		{
			this.SendPropertyChanging();
			entity.PROFORMA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROVIDER")]
	public partial class PROVIDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PROVIDERID;
		
		private string _PROVIDERFIRSTNAME;
		
		private string _PROVIDERLASTNAME;
		
		private System.Nullable<System.DateTime> _PROVIDERINSERTIONDATE;
		
		private string _PROVIDERADRESS;
		
		private string _PROVIDERRS;
		
		private string _PROVIEDERPC;
		
		private string _PROVIEDERNIS;
		
		private string _PROVIDERNIF;
		
		private string _PROVIDERCOMPTBANC;
		
		private string _PROVIDERAI;
		
		private System.Data.Linq.Binary _PROVIDERLOGO;
		
		private EntitySet<WEB> _WEBs;
		
		private EntitySet<FOURNITURE> _FOURNITUREs;
		
		private EntitySet<TELEPHONE> _TELEPHONEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPROVIDERIDChanging(int value);
    partial void OnPROVIDERIDChanged();
    partial void OnPROVIDERFIRSTNAMEChanging(string value);
    partial void OnPROVIDERFIRSTNAMEChanged();
    partial void OnPROVIDERLASTNAMEChanging(string value);
    partial void OnPROVIDERLASTNAMEChanged();
    partial void OnPROVIDERINSERTIONDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnPROVIDERINSERTIONDATEChanged();
    partial void OnPROVIDERADRESSChanging(string value);
    partial void OnPROVIDERADRESSChanged();
    partial void OnPROVIDERRSChanging(string value);
    partial void OnPROVIDERRSChanged();
    partial void OnPROVIEDERPCChanging(string value);
    partial void OnPROVIEDERPCChanged();
    partial void OnPROVIEDERNISChanging(string value);
    partial void OnPROVIEDERNISChanged();
    partial void OnPROVIDERNIFChanging(string value);
    partial void OnPROVIDERNIFChanged();
    partial void OnPROVIDERCOMPTBANCChanging(string value);
    partial void OnPROVIDERCOMPTBANCChanged();
    partial void OnPROVIDERAIChanging(string value);
    partial void OnPROVIDERAIChanged();
    partial void OnPROVIDERLOGOChanging(System.Data.Linq.Binary value);
    partial void OnPROVIDERLOGOChanged();
    #endregion
		
		public PROVIDER()
		{
			this._WEBs = new EntitySet<WEB>(new Action<WEB>(this.attach_WEBs), new Action<WEB>(this.detach_WEBs));
			this._FOURNITUREs = new EntitySet<FOURNITURE>(new Action<FOURNITURE>(this.attach_FOURNITUREs), new Action<FOURNITURE>(this.detach_FOURNITUREs));
			this._TELEPHONEs = new EntitySet<TELEPHONE>(new Action<TELEPHONE>(this.attach_TELEPHONEs), new Action<TELEPHONE>(this.detach_TELEPHONEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PROVIDERID
		{
			get
			{
				return this._PROVIDERID;
			}
			set
			{
				if ((this._PROVIDERID != value))
				{
					this.OnPROVIDERIDChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERID = value;
					this.SendPropertyChanged("PROVIDERID");
					this.OnPROVIDERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERFIRSTNAME", DbType="NVarChar(MAX)")]
		public string PROVIDERFIRSTNAME
		{
			get
			{
				return this._PROVIDERFIRSTNAME;
			}
			set
			{
				if ((this._PROVIDERFIRSTNAME != value))
				{
					this.OnPROVIDERFIRSTNAMEChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERFIRSTNAME = value;
					this.SendPropertyChanged("PROVIDERFIRSTNAME");
					this.OnPROVIDERFIRSTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERLASTNAME", DbType="NVarChar(MAX)")]
		public string PROVIDERLASTNAME
		{
			get
			{
				return this._PROVIDERLASTNAME;
			}
			set
			{
				if ((this._PROVIDERLASTNAME != value))
				{
					this.OnPROVIDERLASTNAMEChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERLASTNAME = value;
					this.SendPropertyChanged("PROVIDERLASTNAME");
					this.OnPROVIDERLASTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERINSERTIONDATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> PROVIDERINSERTIONDATE
		{
			get
			{
				return this._PROVIDERINSERTIONDATE;
			}
			set
			{
				if ((this._PROVIDERINSERTIONDATE != value))
				{
					this.OnPROVIDERINSERTIONDATEChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERINSERTIONDATE = value;
					this.SendPropertyChanged("PROVIDERINSERTIONDATE");
					this.OnPROVIDERINSERTIONDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERADRESS", DbType="NVarChar(MAX)")]
		public string PROVIDERADRESS
		{
			get
			{
				return this._PROVIDERADRESS;
			}
			set
			{
				if ((this._PROVIDERADRESS != value))
				{
					this.OnPROVIDERADRESSChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERADRESS = value;
					this.SendPropertyChanged("PROVIDERADRESS");
					this.OnPROVIDERADRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERRS", DbType="NVarChar(MAX)")]
		public string PROVIDERRS
		{
			get
			{
				return this._PROVIDERRS;
			}
			set
			{
				if ((this._PROVIDERRS != value))
				{
					this.OnPROVIDERRSChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERRS = value;
					this.SendPropertyChanged("PROVIDERRS");
					this.OnPROVIDERRSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIEDERPC", DbType="NVarChar(MAX)")]
		public string PROVIEDERPC
		{
			get
			{
				return this._PROVIEDERPC;
			}
			set
			{
				if ((this._PROVIEDERPC != value))
				{
					this.OnPROVIEDERPCChanging(value);
					this.SendPropertyChanging();
					this._PROVIEDERPC = value;
					this.SendPropertyChanged("PROVIEDERPC");
					this.OnPROVIEDERPCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIEDERNIS", DbType="NVarChar(MAX)")]
		public string PROVIEDERNIS
		{
			get
			{
				return this._PROVIEDERNIS;
			}
			set
			{
				if ((this._PROVIEDERNIS != value))
				{
					this.OnPROVIEDERNISChanging(value);
					this.SendPropertyChanging();
					this._PROVIEDERNIS = value;
					this.SendPropertyChanged("PROVIEDERNIS");
					this.OnPROVIEDERNISChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERNIF", DbType="NVarChar(MAX)")]
		public string PROVIDERNIF
		{
			get
			{
				return this._PROVIDERNIF;
			}
			set
			{
				if ((this._PROVIDERNIF != value))
				{
					this.OnPROVIDERNIFChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERNIF = value;
					this.SendPropertyChanged("PROVIDERNIF");
					this.OnPROVIDERNIFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERCOMPTBANC", DbType="NVarChar(MAX)")]
		public string PROVIDERCOMPTBANC
		{
			get
			{
				return this._PROVIDERCOMPTBANC;
			}
			set
			{
				if ((this._PROVIDERCOMPTBANC != value))
				{
					this.OnPROVIDERCOMPTBANCChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERCOMPTBANC = value;
					this.SendPropertyChanged("PROVIDERCOMPTBANC");
					this.OnPROVIDERCOMPTBANCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERAI", DbType="NVarChar(MAX)")]
		public string PROVIDERAI
		{
			get
			{
				return this._PROVIDERAI;
			}
			set
			{
				if ((this._PROVIDERAI != value))
				{
					this.OnPROVIDERAIChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERAI = value;
					this.SendPropertyChanged("PROVIDERAI");
					this.OnPROVIDERAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERLOGO", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PROVIDERLOGO
		{
			get
			{
				return this._PROVIDERLOGO;
			}
			set
			{
				if ((this._PROVIDERLOGO != value))
				{
					this.OnPROVIDERLOGOChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERLOGO = value;
					this.SendPropertyChanged("PROVIDERLOGO");
					this.OnPROVIDERLOGOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROVIDER_WEB", Storage="_WEBs", ThisKey="PROVIDERID", OtherKey="PROVIDERID")]
		public EntitySet<WEB> WEBs
		{
			get
			{
				return this._WEBs;
			}
			set
			{
				this._WEBs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROVIDER_FOURNITURE", Storage="_FOURNITUREs", ThisKey="PROVIDERID", OtherKey="PROVIDERID")]
		public EntitySet<FOURNITURE> FOURNITUREs
		{
			get
			{
				return this._FOURNITUREs;
			}
			set
			{
				this._FOURNITUREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROVIDER_TELEPHONE", Storage="_TELEPHONEs", ThisKey="PROVIDERID", OtherKey="PROVIDERID")]
		public EntitySet<TELEPHONE> TELEPHONEs
		{
			get
			{
				return this._TELEPHONEs;
			}
			set
			{
				this._TELEPHONEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WEBs(WEB entity)
		{
			this.SendPropertyChanging();
			entity.PROVIDER = this;
		}
		
		private void detach_WEBs(WEB entity)
		{
			this.SendPropertyChanging();
			entity.PROVIDER = null;
		}
		
		private void attach_FOURNITUREs(FOURNITURE entity)
		{
			this.SendPropertyChanging();
			entity.PROVIDER = this;
		}
		
		private void detach_FOURNITUREs(FOURNITURE entity)
		{
			this.SendPropertyChanging();
			entity.PROVIDER = null;
		}
		
		private void attach_TELEPHONEs(TELEPHONE entity)
		{
			this.SendPropertyChanging();
			entity.PROVIDER = this;
		}
		
		private void detach_TELEPHONEs(TELEPHONE entity)
		{
			this.SendPropertyChanging();
			entity.PROVIDER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATE")]
	public partial class STATE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PRODUCTID;
		
		private int _PROSTATEID;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
		private EntityRef<PRODUCTSTATE> _PRODUCTSTATE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPRODUCTIDChanging(int value);
    partial void OnPRODUCTIDChanged();
    partial void OnPROSTATEIDChanging(int value);
    partial void OnPROSTATEIDChanged();
    #endregion
		
		public STATE()
		{
			this._PRODUCT = default(EntityRef<PRODUCT>);
			this._PRODUCTSTATE = default(EntityRef<PRODUCTSTATE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PRODUCTID
		{
			get
			{
				return this._PRODUCTID;
			}
			set
			{
				if ((this._PRODUCTID != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCTIDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTID = value;
					this.SendPropertyChanged("PRODUCTID");
					this.OnPRODUCTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROSTATEID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PROSTATEID
		{
			get
			{
				return this._PROSTATEID;
			}
			set
			{
				if ((this._PROSTATEID != value))
				{
					if (this._PRODUCTSTATE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPROSTATEIDChanging(value);
					this.SendPropertyChanging();
					this._PROSTATEID = value;
					this.SendPropertyChanged("PROSTATEID");
					this.OnPROSTATEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_STATE", Storage="_PRODUCT", ThisKey="PRODUCTID", OtherKey="PRODUCTID", IsForeignKey=true)]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.STATEs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.STATEs.Add(this);
						this._PRODUCTID = value.PRODUCTID;
					}
					else
					{
						this._PRODUCTID = default(int);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCTSTATE_STATE", Storage="_PRODUCTSTATE", ThisKey="PROSTATEID", OtherKey="PROSTATEID", IsForeignKey=true)]
		public PRODUCTSTATE PRODUCTSTATE
		{
			get
			{
				return this._PRODUCTSTATE.Entity;
			}
			set
			{
				PRODUCTSTATE previousValue = this._PRODUCTSTATE.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCTSTATE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCTSTATE.Entity = null;
						previousValue.STATEs.Remove(this);
					}
					this._PRODUCTSTATE.Entity = value;
					if ((value != null))
					{
						value.STATEs.Add(this);
						this._PROSTATEID = value.PROSTATEID;
					}
					else
					{
						this._PROSTATEID = default(int);
					}
					this.SendPropertyChanged("PRODUCTSTATE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STOCK")]
	public partial class STOCK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _STOCKID;
		
		private string _STOCKNAME;
		
		private string _STOCKADRESS;
		
		private EntitySet<STOCKER> _STOCKERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSTOCKIDChanging(int value);
    partial void OnSTOCKIDChanged();
    partial void OnSTOCKNAMEChanging(string value);
    partial void OnSTOCKNAMEChanged();
    partial void OnSTOCKADRESSChanging(string value);
    partial void OnSTOCKADRESSChanged();
    #endregion
		
		public STOCK()
		{
			this._STOCKERs = new EntitySet<STOCKER>(new Action<STOCKER>(this.attach_STOCKERs), new Action<STOCKER>(this.detach_STOCKERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOCKID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int STOCKID
		{
			get
			{
				return this._STOCKID;
			}
			set
			{
				if ((this._STOCKID != value))
				{
					this.OnSTOCKIDChanging(value);
					this.SendPropertyChanging();
					this._STOCKID = value;
					this.SendPropertyChanged("STOCKID");
					this.OnSTOCKIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOCKNAME", DbType="NVarChar(MAX)")]
		public string STOCKNAME
		{
			get
			{
				return this._STOCKNAME;
			}
			set
			{
				if ((this._STOCKNAME != value))
				{
					this.OnSTOCKNAMEChanging(value);
					this.SendPropertyChanging();
					this._STOCKNAME = value;
					this.SendPropertyChanged("STOCKNAME");
					this.OnSTOCKNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOCKADRESS", DbType="NVarChar(MAX)")]
		public string STOCKADRESS
		{
			get
			{
				return this._STOCKADRESS;
			}
			set
			{
				if ((this._STOCKADRESS != value))
				{
					this.OnSTOCKADRESSChanging(value);
					this.SendPropertyChanging();
					this._STOCKADRESS = value;
					this.SendPropertyChanged("STOCKADRESS");
					this.OnSTOCKADRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_STOCKER", Storage="_STOCKERs", ThisKey="STOCKID", OtherKey="STOCKID")]
		public EntitySet<STOCKER> STOCKERs
		{
			get
			{
				return this._STOCKERs;
			}
			set
			{
				this._STOCKERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STOCKERs(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = this;
		}
		
		private void detach_STOCKERs(STOCKER entity)
		{
			this.SendPropertyChanging();
			entity.STOCK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STOCKER")]
	public partial class STOCKER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PRODUCTID;
		
		private int _STOCKID;
		
		private EntityRef<PRODUCT> _PRODUCT;
		
		private EntityRef<STOCK> _STOCK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPRODUCTIDChanging(int value);
    partial void OnPRODUCTIDChanged();
    partial void OnSTOCKIDChanging(int value);
    partial void OnSTOCKIDChanged();
    #endregion
		
		public STOCKER()
		{
			this._PRODUCT = default(EntityRef<PRODUCT>);
			this._STOCK = default(EntityRef<STOCK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PRODUCTID
		{
			get
			{
				return this._PRODUCTID;
			}
			set
			{
				if ((this._PRODUCTID != value))
				{
					if (this._PRODUCT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPRODUCTIDChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTID = value;
					this.SendPropertyChanged("PRODUCTID");
					this.OnPRODUCTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOCKID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int STOCKID
		{
			get
			{
				return this._STOCKID;
			}
			set
			{
				if ((this._STOCKID != value))
				{
					if (this._STOCK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSTOCKIDChanging(value);
					this.SendPropertyChanging();
					this._STOCKID = value;
					this.SendPropertyChanged("STOCKID");
					this.OnSTOCKIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRODUCT_STOCKER", Storage="_PRODUCT", ThisKey="PRODUCTID", OtherKey="PRODUCTID", IsForeignKey=true)]
		public PRODUCT PRODUCT
		{
			get
			{
				return this._PRODUCT.Entity;
			}
			set
			{
				PRODUCT previousValue = this._PRODUCT.Entity;
				if (((previousValue != value) 
							|| (this._PRODUCT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRODUCT.Entity = null;
						previousValue.STOCKERs.Remove(this);
					}
					this._PRODUCT.Entity = value;
					if ((value != null))
					{
						value.STOCKERs.Add(this);
						this._PRODUCTID = value.PRODUCTID;
					}
					else
					{
						this._PRODUCTID = default(int);
					}
					this.SendPropertyChanged("PRODUCT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STOCK_STOCKER", Storage="_STOCK", ThisKey="STOCKID", OtherKey="STOCKID", IsForeignKey=true)]
		public STOCK STOCK
		{
			get
			{
				return this._STOCK.Entity;
			}
			set
			{
				STOCK previousValue = this._STOCK.Entity;
				if (((previousValue != value) 
							|| (this._STOCK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STOCK.Entity = null;
						previousValue.STOCKERs.Remove(this);
					}
					this._STOCK.Entity = value;
					if ((value != null))
					{
						value.STOCKERs.Add(this);
						this._STOCKID = value.STOCKID;
					}
					else
					{
						this._STOCKID = default(int);
					}
					this.SendPropertyChanged("STOCK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TELEPHONE")]
	public partial class TELEPHONE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TELEPHONEID;
		
		private System.Nullable<int> _PROVIDERID;
		
		private int _CLIENTID;
		
		private string _TELEPHONENUMBER;
		
		private string _TELEPHONETYPE;
		
		private EntityRef<CLIENT> _CLIENT;
		
		private EntityRef<PROVIDER> _PROVIDER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTELEPHONEIDChanging(int value);
    partial void OnTELEPHONEIDChanged();
    partial void OnPROVIDERIDChanging(System.Nullable<int> value);
    partial void OnPROVIDERIDChanged();
    partial void OnCLIENTIDChanging(int value);
    partial void OnCLIENTIDChanged();
    partial void OnTELEPHONENUMBERChanging(string value);
    partial void OnTELEPHONENUMBERChanged();
    partial void OnTELEPHONETYPEChanging(string value);
    partial void OnTELEPHONETYPEChanged();
    #endregion
		
		public TELEPHONE()
		{
			this._CLIENT = default(EntityRef<CLIENT>);
			this._PROVIDER = default(EntityRef<PROVIDER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TELEPHONEID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TELEPHONEID
		{
			get
			{
				return this._TELEPHONEID;
			}
			set
			{
				if ((this._TELEPHONEID != value))
				{
					this.OnTELEPHONEIDChanging(value);
					this.SendPropertyChanging();
					this._TELEPHONEID = value;
					this.SendPropertyChanged("TELEPHONEID");
					this.OnTELEPHONEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PROVIDERID", DbType="Int")]
		public System.Nullable<int> PROVIDERID
		{
			get
			{
				return this._PROVIDERID;
			}
			set
			{
				if ((this._PROVIDERID != value))
				{
					if (this._PROVIDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPROVIDERIDChanging(value);
					this.SendPropertyChanging();
					this._PROVIDERID = value;
					this.SendPropertyChanged("PROVIDERID");
					this.OnPROVIDERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLIENTID", DbType="Int NOT NULL")]
		public int CLIENTID
		{
			get
			{
				return this._CLIENTID;
			}
			set
			{
				if ((this._CLIENTID != value))
				{
					if (this._CLIENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCLIENTIDChanging(value);
					this.SendPropertyChanging();
					this._CLIENTID = value;
					this.SendPropertyChanged("CLIENTID");
					this.OnCLIENTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TELEPHONENUMBER", DbType="NVarChar(MAX)")]
		public string TELEPHONENUMBER
		{
			get
			{
				return this._TELEPHONENUMBER;
			}
			set
			{
				if ((this._TELEPHONENUMBER != value))
				{
					this.OnTELEPHONENUMBERChanging(value);
					this.SendPropertyChanging();
					this._TELEPHONENUMBER = value;
					this.SendPropertyChanged("TELEPHONENUMBER");
					this.OnTELEPHONENUMBERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TELEPHONETYPE", DbType="NVarChar(MAX)")]
		public string TELEPHONETYPE
		{
			get
			{
				return this._TELEPHONETYPE;
			}
			set
			{
				if ((this._TELEPHONETYPE != value))
				{
					this.OnTELEPHONETYPEChanging(value);
					this.SendPropertyChanging();
					this._TELEPHONETYPE = value;
					this.SendPropertyChanged("TELEPHONETYPE");
					this.OnTELEPHONETYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLIENT_TELEPHONE", Storage="_CLIENT", ThisKey="CLIENTID", OtherKey="CLIENTID", IsForeignKey=true)]
		public CLIENT CLIENT
		{
			get
			{
				return this._CLIENT.Entity;
			}
			set
			{
				CLIENT previousValue = this._CLIENT.Entity;
				if (((previousValue != value) 
							|| (this._CLIENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLIENT.Entity = null;
						previousValue.TELEPHONEs.Remove(this);
					}
					this._CLIENT.Entity = value;
					if ((value != null))
					{
						value.TELEPHONEs.Add(this);
						this._CLIENTID = value.CLIENTID;
					}
					else
					{
						this._CLIENTID = default(int);
					}
					this.SendPropertyChanged("CLIENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PROVIDER_TELEPHONE", Storage="_PROVIDER", ThisKey="PROVIDERID", OtherKey="PROVIDERID", IsForeignKey=true)]
		public PROVIDER PROVIDER
		{
			get
			{
				return this._PROVIDER.Entity;
			}
			set
			{
				PROVIDER previousValue = this._PROVIDER.Entity;
				if (((previousValue != value) 
							|| (this._PROVIDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PROVIDER.Entity = null;
						previousValue.TELEPHONEs.Remove(this);
					}
					this._PROVIDER.Entity = value;
					if ((value != null))
					{
						value.TELEPHONEs.Add(this);
						this._PROVIDERID = value.PROVIDERID;
					}
					else
					{
						this._PROVIDERID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PROVIDER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
